<source>
  @type tail
  refresh_interval 10
  <parse>
    @type json
    <pattern>
      format json
      time_type string
      time_key timestamp
      time_format %Y-%m-%dT%H:%M:%S.%6N%z
      keep_time_key true
    </pattern>
    <pattern>
      format none
    </pattern>
  </parse>
  #path /storage0/logforwarder/logdata_0_alert_*.json
  path /storage0/fortisiem/logdata_0_alert_*.json
  #path /storage0/logforwarder/eve-nsm-alert-*.log
  tag sw-suricata-nsm-alerts
  pos_file /tmp/t.log.pos
</source>

<!-- This 'filter' section is used to process or transform the events coming from the data source specified by the tag 'sentrywire-suricata-alerts'. '@type json_transform' tells Fluentd to use the json_transform plugin. This plugin can apply transformations to the event records in the form of JavaScript code. 'transform_script' specifies the transformation to be applied, in this case it is a function that will flatten the JSON  -->
<filter sentrywire-suricata-alerts>
  @type json_transform
  transform_script flatten
</filter>

# This configuration instructs Fluentd to handle events tagged with 'sw-suricata-nsm-alerts'.
<match sw-suricata-nsm-alerts>
  # The 'copy' output plugin duplicates these events.
  @type copy

  # The first 'store' directive sends the duplicated events to the console in JSON format.
  <store>
    @type stdout
    output_type json
  </store>

  # The second 'store' directive sends the duplicated events to a remote syslog server.
  # The remote syslog server's IP address is '10.1.55.188', and it listens on port '514' for incoming connections.
  # The connection is established over TCP, and the data is sent in JSON format.
  <store>
    @type remote_syslog
    host 10.1.55.188
    port 514
    protocol tcp
    <format>
      @type json
    </format>
  </store>
</match>
